trigger: none

schedules:
  - cron: "0 8 14 * *"
    displayName: Monthly build
    branches:
     include:
     - main
    always: true

parameters:
- name: mode
  type: string
  default: stable
  values:
    - beta
    - stable
- name: image
  type: string
  default: win-2019
  values:
    - win-2019
    - ubuntu-pro-2204

name: $(Year:yyyy).$(Month).$(Rev:r)

variables:
  - name: imageTemplateName
    value: az-uks-$(environment)-${{ parameters.image }}-it
  - name: fileToRun
    value: infrastructure.platform.AIB/infra/images/${{ parameters.image }}.bicep #images/${{ parameters.image }}.bicep
  - name: version
    value: '$(Build.BuildNumber)'

  - ${{ if eq(parameters.mode, 'beta') }}:
    - name: environment
      value: np01
    - name: agentPool
      value: linuxagent
    - name: subscriptionId
      value: de991dcf-6e08-4849-8e37-d1494a815a94
    - name: serviceConnection
      value: bicepaibspn

  - ${{ if eq(parameters.mode, 'stable') }}:
    - name: environment
      value: pr01
    - name: agentPool
      value: dsha
    - name: subscriptionId
      value: de991dcf-6e08-4849-8e37-d1494a815a94
    - name: serviceConnection
      value: bicepaibspn

stages:
  - stage: Build
    displayName: 'Build Bicep'
    pool: $(agentPool)
    jobs:
      - job: BuildBicep
        steps:
          - checkout: self 
          - script: |
              echo "Listing files in $(Build.SourcesDirectory):"
              dir $(Build.SourcesDirectory)
            displayName: 'List Files in Sources Directory'
          - task: CopyFiles@2
            inputs:
              SourceFolder: $(Build.SourcesDirectory)/infrastructure.platform.AIB/infra/images  # Adjusted path
              Contents: 'win-2019.bicep'
              TargetFolder: $(Build.ArtifactStagingDirectory)

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                echo "File to run: $(fileToRun)"
                az bicep build --file $(fileToRun)

  - stage: Clean
    displayName: 'Cleanup'
    dependsOn: Build
    pool: $(agentPool)
    jobs:
      - job: Clean
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: "Bash"  # PowerShell is being used
              scriptLocation: "inlineScript"
              inlineScript: |
                az resource delete --resource-group "az-uks-${{ variables.environment }}-gallery-rg" --name ${{ variables.imageTemplateName }} --resource-type "Microsoft.VirtualMachineImages/imageTemplates" --verbose

  - stage: Deploy
    displayName: 'Deploy Bicep'
    dependsOn: Clean
    pool: $(agentPool)
    jobs:
      - job: DeployBicep
        steps:
          - task: AzurePowerShell@5 #AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: "ps"
              azurePowerShellVersion: 'OtherVersion'
              preferredAzurePowerShellVersion: '11.1.0'
              scriptLocation: "inlineScript"
              inlineScript: |
                $image = "${{ parameters.image }}"
                Write-Host "Selected image: $image"

                if ($image -eq "ubuntu-pro-2204") {
                  Write-Host "Accepting Ubuntu Pro 22.04 image terms..."
                  az vm image terms accept --urn canonical:0001-com-ubuntu-pro-jammy:pro-22_04-lts:22.04.202504080
                } else {
                  Write-Host "No image terms acceptance required for image: $image"
                }

                # Proceed with Bicep deployment
                az deployment group create `
                  --name Image_$(Build.BuildId) `
                  --resource-group "az-uks-${{ variables.environment }}-gallery-rg" `
                  --template-file $(fileToRun) `
                  --parameters infrastructure.platform.AIB/infra/images/placeholder.json `
                  version=$(version) `
                  environment=$(environment) `
                  name=${{ parameters.image }}

  # - stage: Deploy
  #   displayName: 'Deploy Bicep'
  #   dependsOn: Clean
  #   pool: $(agentPool)
  #   jobs:
  #     - job: DeployBicep
  #       steps:
  #         - task: AzureCLI@2
  #           inputs:
  #             azureSubscription: $(serviceConnection)
  #             scriptType: "ps"
  #             scriptLocation: "inlineScript"
  #             inlineScript: |
  #               az deployment group create --name Image_$(Build.BuildId) --resource-group 'az-uks-${{ variables.environment }}-gallery-rg' --template-file $(fileToRun) --parameters infrastructure.platform.AIB/infra/images/placeholder.json version=$(version) environment=$(environment) name=${{ parameters.image }}

  - stage: BuildImage
    displayName: 'Build Image'
    dependsOn: Deploy
    pool: $(agentPool)
    jobs:
      - job: BuildImage
        timeoutInMinutes: 120
        steps:
          - task: AzurePowerShell@5 #AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: "ps"
              azurePowerShellVersion: 'OtherVersion'
              preferredAzurePowerShellVersion: '11.1.0'
              scriptLocation: "inlineScript"
              inlineScript: |
                az image builder run --name ${{ variables.imageTemplateName }} --resource-group 'az-uks-${{ variables.environment }}-gallery-rg' --no-wait
                az image builder wait --name ${{ variables.imageTemplateName }} --resource-group 'az-uks-${{ variables.environment }}-gallery-rg' --custom "lastRunStatus.runState!='Running'"
                if (($lastRunStatus = az image builder show -n ${{ variables.imageTemplateName }} --resource-group 'az-uks-${{ variables.environment }}-gallery-rg' --query "lastRunStatus.runState") -eq "Failed") {
                  exit 1
                }
                az image builder show --name ${{ variables.imageTemplateName }} --resource-group 'az-uks-${{ variables.environment }}-gallery-rg'
